---
title: "Utopia Lost"
subtitle: "Towards a workflow for transparent meta analysis"
author: ""
format: 
  revealjs:
    theme: simple
    transition: slide
    incremental: true
    slide-number: true
    width: 1280
    height: 720
    fig-cap-location: margin
---

```{r echo = FALSE}
library(reticulate)
use_condaenv("data", required = TRUE)

```

![](pics/documents_comic.png){fig-align="center"}

## 

### Part 1
1. What are we doing??
2. What would this look like _in an ideal world_?
3. Why can't we do it that way?
4. What would _doing our best_ look like?
5. How do we do it?

<br>

### Part 2
1. New tools
2. New workflow
3. Discussion

## What are we doing??

- We're trying to increase total human understanding of the mechanisms that can create poverty, the mechanisms that can end poverty, and how those mechanisms vary by context
- We're trying to empower people with money to spend it in the most efficient way possible to meet their poverty-reduction goals
- Is this right??

## What would this look like in an ideal world?

- Authors make their microdata, code, and detailed documentation publicly available
- We download this microdata and harmonize it, also adding study-level metadata
- We fit a big Bayesian multilevel model to infer treatment effects with lots of interactions on variables we care about
- We bring these inferences together with detailed costing data for Bayesian cost-benefit analysis
- We make these inferences publicly available via user-friendly tools for nontechnical folks/policymakers
- We publish these results, get rich and famous, get tenure

## Why can't we do it that way?

- Authors forget what they did, lose their data/code, etc
- Even when we can get data/code, nothing is documented clearly. So it takes an insane amount of work (and code) to harmonize everything
- Sometimes studies are so different we have to gloss over those differences in order to create an analytically-tractable harmonized dataset
- It is often unclear which studies or treatment-level factors drive variation, or how to create a general-enough list of such factors
- Nobody has taught us how to do all this!

## What would doing our best look like?

- Make sure our code actually does what we say it does. 
- Make sure other people can `find -> run -> understand -> edit -> improve` our code.
- Make sure we have fun, learn stuff, and don't burn out.

![](pics/hadley.jpg){width="100%"}

## How do we do it?

- Version control
- Continuous integration
- Test-driven development
- Documentation
- Teamwork


## 
<br>

<img src="pics/rlang.jpg" width="200" alt="R language logo">

- Vast library of pipelining + analysis tools
- Functional programming!!
- Free and open-source



## 
<img src="pics/git.png" width="200" alt="Git logo">
<br>

- 'Track Changes' on steroids
- The most widely-used version control tool for data analysis
- Free and open-source


## 
<img src="pics/github.png" width="200" alt="GitHub logo">
<br>

- Website where your Git folders live.
- Lets your whole team make changes to the codebase in a transparent and organized way.
- Free and open-source.


## 
<img src="pics/renv.png" width="200" alt="Renv logo">
<br>

- Project-specific package dependency management
- Reproducible environments across machines
- Isolates project dependencies from system libraries


## 
<img src="pics/targets.svg" width="200" alt="Targets logo">
<br>

- Pipeline toolkit for reproducible data science workflows
- Automatically detects which steps need to be rerun.
- Free and open-source.


## 
<img src="pics/styler.png" width="200" alt="Styler logo">
<br>

- Automatically standardizes/reformats all the code in the entire project without changing any of its functionality.
- Lets you choose whatever formatting rules you want.
- Free and open-source.


## 
<img src="pics/lintr.png" width="200" alt="Lintr logo">
<br>

- Automatically checks your code for common bugs, then yells at you if it finds any
- Can set it up to run automatically any time anybody tries to make changes to the code, preventing errors
- Free and open-source


## 
<img src="pics/testthat.png" width="200" alt="Testthat logo">
<br>

- Set up tests to see if your code actually does what you think it does
- Provides a basis for **test-driven development** -- set some milestones, then make sure each step _actually works_ before moving on to the next milestone
- Free and open-source

## High-level workflow

- RA Technical Onboarding
- Assigning Tasks
- Writing New Code
- Integrating That New Code

## Technical Onboarding
```{dot}
//| fig-width: 4
//| fig-height: 7
digraph Contributor_Setup {
  // Graph attributes
  rankdir=TB;  // Top to bottom layout
  fontname="Arial";
  fontsize=16;
  label="";
  labelloc="t";
  node [shape=box, style="rounded,filled", fontname="Arial", fontsize=11, margin="0.1,0.1", width=1.2, height=0.4];
  edge [fontname="Arial", fontsize=10, penwidth=1.0];
  
  // Nodes with colors (removed the specified steps)
  github_account [label="Create GitHub account\n(if needed)", fillcolor="#f0f4f8", style="rounded,filled"];
  github_auth [label="Set up GitHub authentication\n(SSH keys or token)", fillcolor="#f0f4f8", style="rounded,filled"];
  fork_repo [label="Fork the main repository\nto your GitHub account", fillcolor="#f0f4f8", style="rounded,filled"];
  clone_fork [label="Clone your fork\nto local machine", fillcolor="#e6e0f3", style="rounded,filled"];
  
  // Edges (updated to connect the remaining nodes)
  github_account -> github_auth;
  github_auth -> fork_repo;
  fork_repo -> clone_fork;
}
```

## Assigning Tasks

```{dot}
//| fig-width: 4
//| fig-height: 7
digraph Issue_Workflow {
  // Graph attributes
  rankdir=TB;  // Top to bottom layout
  fontname="Arial";
  fontsize=16;
  label="";
  labelloc="t";
  node [shape=box, style="rounded,filled", fontname="Arial", fontsize=11, margin="0.1,0.1", width=1.2, height=0.4];
  edge [fontname="Arial", fontsize=10, penwidth=1.0];
  
  // Nodes with colors (consolidated and removed sync_fork)
  identify [label="RA identifies task\nthat needs to be done", fillcolor="#e0eef3", style="rounded,filled"];
  create_issue [label="Create GitHub Issue\nwith informative labels\n(Survey ID, 'missing data', etc)", fillcolor="#f0f4f8", style="rounded,filled"];
  assign_issue [label="Assign issue to contributor\n(or self-assign)", fillcolor="#f0f4f8", style="rounded,filled"];
  branch [label="Create feature branch\nnamed after issue number", fillcolor="#e6e0f3", style="rounded,filled"];
  
  // Edges
  identify -> create_issue;
  create_issue -> assign_issue;
  assign_issue -> branch;
}
```

## Writing New Code

```{dot}
//| fig-width: 4
//| fig-height: 7
digraph Development_Workflow {
  // Graph attributes
  rankdir=TB;  // Top to bottom layout
  fontname="Arial";
  fontsize=16;
  label="";
  labelloc="t";
  node [shape=box, style="rounded,filled", fontname="Arial", fontsize=11, margin="0.1,0.1", width=1.2, height=0.4];
  edge [fontname="Arial", fontsize=10, penwidth=1.0];
  
  // Nodes with colors (streamlined)
  renv_restore [label="renv::restore()\nSet up project environment", fillcolor="#e0f3e0", style="rounded,filled"];
  tar_make_initial [label="targets::tar_make()\nVerify pipeline works\nbefore changes", fillcolor="#e0f3e0", style="rounded,filled"];
  test_dir_initial [label="testthat::test_dir()\nConfirm all tests\npass initially", fillcolor="#f3e0e0", style="rounded,filled"];
  write_tests [label="Write new unit tests for\nthe required functionality", fillcolor="#f3e0e0", style="rounded,filled"];
  implement [label="Implement code changes\nto address the issue", fillcolor="#e0f3e0", style="rounded,filled"];
  test_driven [label="Iterate between coding\nand testing", fillcolor="#f3e0e0", style="rounded,filled"];
  
  // Edges
  renv_restore -> tar_make_initial;
  tar_make_initial -> test_dir_initial;
  test_dir_initial -> write_tests;
  write_tests -> implement;
  implement -> test_driven;
  test_driven -> implement [label="Refine", constraint=false];
}
```

## Integrating That New Code

```{dot}
//| fig-width: 4
//| fig-height: 7
digraph Finalization_Workflow {
  // Graph attributes
  rankdir=TB;  // Top to bottom layout
  fontname="Arial";
  fontsize=16;
  label="";
  labelloc="t";
  node [shape=box, style="rounded,filled", fontname="Arial", fontsize=11, margin="0.1,0.1", width=1.2, height=0.4];
  edge [fontname="Arial", fontsize=10, penwidth=1.0];
  
  // Nodes with colors (removed test_dir and tar_make)
  styling [label="style_dir()\nFormat code consistently", fillcolor="#f8f4e0", style="rounded,filled"];
  linting [label="lint_dir()\nIdentify any code issues", fillcolor="#f8f4e0", style="rounded,filled"];
  commit [label="Commit changes with\nmeaningful message", fillcolor="#e6e0f3", style="rounded,filled"];
  push [label="Push branch to fork", fillcolor="#e6e0f3", style="rounded,filled"];
  pr [label="Open Pull Request\nreferencing the issue", fillcolor="#f0f4f8", style="rounded,filled"];
  review [label="Code Review Process", fillcolor="#f0f4f8", style="rounded,filled"];
  merge [label="PR approved and merged", fillcolor="#f0f4f8", style="rounded,filled"];
  back_to_prev [label="Back to previous slide", fillcolor="#ffffff", style="rounded,filled,dashed"];
  
  // Edges
  styling -> linting;
  linting -> commit;
  commit -> push;
  push -> pr;
  pr -> review;
  review -> back_to_prev [label="Changes\nrequested", style="dashed"];
  review -> merge [label="Approved"];
  
  // Position the "back to prev" node above
  {rank=min; back_to_prev}
}
```

## Other thoughts


## Peoples' thoughts from yesterday:

- **Opportunities for team members to keep learning**. These tools are widely used, so we do our RAs and undergrads a service by having them adopt them -- they will serve them well in any data analysis context, and also are nice resume lines. 
- **Romil: we need more input from PIs during harmonization.** Alex: Historically I've found GitHub actually helps with this, having PIs all weigh in and engage with each other in a single shared space that is documented forever. They tend to find it an engaging forum. 